#!/usr/bin/env node
/**
 * CMS Setup CLI (STEP 12)
 *
 * One-time setup script that:
 *  • Prompts for CF_ACCOUNT_ID and CF_API_TOKEN (inquirer)
 *  • Writes .env with CF_ACCOUNT_ID, CF_API_TOKEN, CF_PAGES_PROJECT=jr-articles
 *  • Optionally verifies credentials with `wrangler whoami`
 *  • Supports --dry-run to print the .env content without writing
 */

import inquirer from 'inquirer';
import { writeFile } from 'fs/promises';
import { existsSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import { spawn } from 'child_process';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const ROOT_DIR = join(__dirname, '..');
const ENV_PATH = join(ROOT_DIR, '.env');
const CF_PAGES_PROJECT = 'jr-articles'; // fixed per STEP 12

const args = new Set(process.argv.slice(2));
const DRY_RUN = args.has('--dry-run') || args.has('-n');

console.log(`\n🚀 CMS Setup (Cloudflare Pages)\n`);

function printEnvPreview({ accountId, apiToken }) {
  const lines = [
    '# Cloudflare Pages Configuration',
    '# Generated by CMS Setup CLI',
    '',
    `CF_ACCOUNT_ID=${accountId}`,
    `CF_API_TOKEN=${apiToken}`,
    `CF_PAGES_PROJECT=${CF_PAGES_PROJECT}`,
    '',
  ];
  console.log(lines.join('\n'));
}

async function verifyWithWrangler({ accountId, apiToken }) {
  return new Promise((resolve) => {
    // Use the provided API token for whoami
    const child = spawn('wrangler', ['whoami'], {
      shell: true,
      env: { ...process.env, CF_API_TOKEN: apiToken },
      stdio: ['ignore', 'pipe', 'pipe'],
    });

    let stdout = '';
    let stderr = '';
    child.stdout.on('data', (d) => (stdout += d.toString()));
    child.stderr.on('data', (d) => (stderr += d.toString()));

    child.on('error', (err) => {
      if (err.code === 'ENOENT') {
        console.error('\n⚠️  Wrangler CLI not found.');
        console.error('   Install it with: npm install -g wrangler\n');
      } else {
        console.error('\n❌ Failed to run wrangler:', err.message);
      }
      resolve({ ok: false, message: 'wrangler not available' });
    });

    child.on('close', (code) => {
      if (code === 0) {
        console.log('\n✅ wrangler whoami succeeded.');
        // Optionally print parsed summary
        const acctLine = stdout.split('\n').find((l) => l.toLowerCase().includes('account'));
        if (acctLine) {console.log('   ', acctLine.trim());}
        resolve({ ok: true });
      } else {
        console.error('\n❌ wrangler whoami failed.');
        if (stderr) {console.error('   ', stderr.trim());}
        console.error('\n💡 Ensure your API token has Cloudflare Pages permissions.');
        resolve({ ok: false, message: 'whoami failed' });
      }
    });
  });
}

async function main() {
  // Prompt for essentials only
  const answers = await inquirer.prompt([
    {
      type: 'input',
      name: 'accountId',
      message: 'Cloudflare Account ID:',
      validate: (v) => (!!v && v.length >= 10) || 'Account ID must be at least 10 characters',
    },
    {
      type: 'password',
      name: 'apiToken',
      message: 'Cloudflare API Token:',
      mask: '•',
      validate: (v) => (!!v && v.length >= 10) || 'API Token must be at least 10 characters',
    },
  ]);

  console.log('\n📄 .env content:');
  printEnvPreview(answers);

  if (DRY_RUN) {
    console.log('\n🧪 Dry run: not writing .env file.');
    console.log('   Rerun without --dry-run to write the file.');
    return;
  }

  // Confirm write
  const { confirmWrite } = await inquirer.prompt([
    { type: 'confirm', name: 'confirmWrite', message: `Write .env to ${ENV_PATH}?`, default: true },
  ]);

  if (!confirmWrite) {
    console.log('\n✖️  Aborted. No files written.');
    return;
  }

  // Write .env
  const lines = [
    '# Cloudflare Pages Configuration',
    '# Generated by CMS Setup CLI',
    `CF_ACCOUNT_ID=${answers.accountId}`,
    `CF_API_TOKEN=${answers.apiToken}`,
    `CF_PAGES_PROJECT=${CF_PAGES_PROJECT}`,
    '',
  ];
  await writeFile(ENV_PATH, lines.join('\n'), 'utf-8');
  console.log(`\n✅ Configuration saved to ${ENV_PATH}`);

  // Optional verification
  const { shouldVerify } = await inquirer.prompt([
    {
      type: 'confirm',
      name: 'shouldVerify',
      message: "Verify credentials with 'wrangler whoami'?",
      default: true,
    },
  ]);

  if (shouldVerify) {
    const result = await verifyWithWrangler(answers);
    if (!result.ok) {
      console.log('\nℹ️  You can retry verification later by running: wrangler whoami');
    }
  }

  console.log("\n🎉 Setup complete. You're ready to export and publish.");
  console.log('   Next steps:');
  console.log('   • npm run cms:compile');
  console.log('   • npm run cms:dev\n');
}

main().catch((err) => {
  console.error('\n❌ Setup failed:', err.message);
  process.exit(1);
});
