#!/usr/bin/env node
/**
 * CMS Setup Wizard
 * Interactive configuration for Cloudflare Pages deployment
 */

import inquirer from "inquirer";
import { writeFile, readFile } from "fs/promises";
import { existsSync } from "fs";
import { join, dirname } from "path";
import { fileURLToPath } from "url";
import { spawn } from "child_process";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const ROOT_DIR = join(__dirname, "..");
const ENV_PATH = join(ROOT_DIR, ".env");

console.log(`
╔═══════════════════════════════════════════════════════════════╗
║                                                               ║
║              🚀 Portfolio CMS Setup Wizard                    ║
║                                                               ║
║  This wizard will help you configure Cloudflare Pages        ║
║  deployment for your portfolio articles.                      ║
║                                                               ║
╚═══════════════════════════════════════════════════════════════╝
`);

/**
 * Check if a command exists in PATH
 */
function commandExists(cmd) {
  return new Promise((resolve) => {
    const process = spawn(
      "cmd",
      ["/c", "where", cmd],
      { stdio: "ignore", shell: true }
    );
    process.on("close", (code) => resolve(code === 0));
  });
}

/**
 * Read existing .env file
 */
async function readExistingEnv() {
  if (!existsSync(ENV_PATH)) {
    return {};
  }

  try {
    const content = await readFile(ENV_PATH, "utf-8");
    const env = {};
    
    content.split("\n").forEach((line) => {
      const trimmed = line.trim();
      if (trimmed && !trimmed.startsWith("#")) {
        const [key, ...valueParts] = trimmed.split("=");
        env[key.trim()] = valueParts.join("=").trim();
      }
    });
    
    return env;
  } catch (error) {
    console.warn("⚠️  Could not read existing .env file:", error.message);
    return {};
  }
}

/**
 * Write .env file
 */
async function writeEnvFile(config) {
  const lines = [
    "# Cloudflare Pages Configuration",
    "# Generated by CMS Setup Wizard",
    "",
    `CF_ACCOUNT_ID=${config.accountId}`,
    `CF_API_TOKEN=${config.apiToken}`,
    `CF_PAGES_PROJECT=${config.projectName}`,
    "",
    "# Optional: Deployment settings",
    "# CF_PAGES_BRANCH=main",
    "# CF_PAGES_COMMIT_MESSAGE=Automated deployment",
    ""
  ];

  await writeFile(ENV_PATH, lines.join("\n"), "utf-8");
  console.log(`\n✅ Configuration saved to ${ENV_PATH}`);
}

/**
 * Main setup flow
 */
async function setup() {
  // Step 1: Check for existing configuration
  console.log("\n📋 Checking existing configuration...\n");
  const existingEnv = await readExistingEnv();
  const hasExisting = Object.keys(existingEnv).length > 0;

  if (hasExisting) {
    console.log("✅ Found existing .env file with:");
    console.log(`   Account ID: ${existingEnv.CF_ACCOUNT_ID || "(not set)"}`);
    console.log(`   API Token:  ${existingEnv.CF_API_TOKEN ? "••••••••" : "(not set)"}`);
    console.log(`   Project:    ${existingEnv.CF_PAGES_PROJECT || "(not set)"}`);
    console.log("");

    const { shouldUpdate } = await inquirer.prompt([
      {
        type: "confirm",
        name: "shouldUpdate",
        message: "Do you want to update this configuration?",
        default: false
      }
    ]);

    if (!shouldUpdate) {
      console.log("\n✓ Keeping existing configuration. Setup complete!");
      process.exit(0);
    }
  }

  // Step 2: Check for wrangler CLI
  console.log("\n🔍 Checking for required dependencies...\n");
  const hasWrangler = await commandExists("wrangler");

  if (!hasWrangler) {
    console.log("⚠️  Wrangler CLI not found.");
    console.log("   Wrangler is required to deploy to Cloudflare Pages.");
    console.log("");

    const { installWrangler } = await inquirer.prompt([
      {
        type: "confirm",
        name: "installWrangler",
        message: "Would you like to install wrangler globally now?",
        default: true
      }
    ]);

    if (installWrangler) {
      console.log("\n📦 Installing wrangler globally...\n");
      
      return new Promise((resolve, reject) => {
        const npmInstall = spawn("npm", ["install", "-g", "wrangler"], {
          stdio: "inherit",
          shell: true
        });

        npmInstall.on("close", (code) => {
          if (code === 0) {
            console.log("\n✅ Wrangler installed successfully!");
            resolve();
          } else {
            console.error("\n❌ Failed to install wrangler.");
            console.log("\n💡 Try installing manually:");
            console.log("   npm install -g wrangler");
            reject(new Error("Wrangler installation failed"));
          }
        });
      }).then(() => setup()); // Restart setup after installation
    } else {
      console.log("\n⚠️  Skipping wrangler installation.");
      console.log("   You'll need to install it manually before publishing:");
      console.log("   npm install -g wrangler\n");
    }
  } else {
    console.log("✅ Wrangler CLI found");
  }

  // Step 3: Collect Cloudflare credentials
  console.log("\n📝 Cloudflare Pages Configuration\n");
  console.log("You'll need the following from your Cloudflare dashboard:");
  console.log("  1. Account ID (found in URL: dash.cloudflare.com/<ACCOUNT_ID>/)\n");
  console.log("  2. API Token (create at: dash.cloudflare.com/profile/api-tokens)");
  console.log("     Use the 'Edit Cloudflare Pages' template\n");
  console.log("  3. Pages Project Name (your project identifier)\n");

  const answers = await inquirer.prompt([
    {
      type: "input",
      name: "accountId",
      message: "Cloudflare Account ID:",
      default: existingEnv.CF_ACCOUNT_ID,
      validate: (input) => {
        if (!input || input.length < 10) {
          return "Account ID must be at least 10 characters";
        }
        return true;
      }
    },
    {
      type: "password",
      name: "apiToken",
      message: "Cloudflare API Token:",
      mask: "•",
      validate: (input) => {
        if (!input || input.length < 10) {
          return "API Token must be at least 10 characters";
        }
        return true;
      }
    },
    {
      type: "input",
      name: "projectName",
      message: "Cloudflare Pages Project Name:",
      default: existingEnv.CF_PAGES_PROJECT || "portfolio-articles",
      validate: (input) => {
        if (!input || input.length < 3) {
          return "Project name must be at least 3 characters";
        }
        if (!/^[a-z0-9-]+$/.test(input)) {
          return "Project name can only contain lowercase letters, numbers, and hyphens";
        }
        return true;
      }
    }
  ]);

  // Step 4: Write configuration
  await writeEnvFile(answers);

  // Step 5: Test configuration (optional)
  console.log("\n🧪 Testing configuration...\n");
  
  const { shouldTest } = await inquirer.prompt([
    {
      type: "confirm",
      name: "shouldTest",
      message: "Would you like to test the Cloudflare connection?",
      default: true
    }
  ]);

  if (shouldTest) {
    console.log("\n🔌 Connecting to Cloudflare...");
    // Note: Actual API test would require wrangler or direct API call
    // For now, just validate the format
    console.log("✅ Configuration format looks valid!");
    console.log("\n💡 To fully test, try running:");
    console.log("   npm run cms:publish");
  }

  // Step 6: Next steps
  console.log(`
╔═══════════════════════════════════════════════════════════════╗
║                                                               ║
║                  ✅ Setup Complete!                           ║
║                                                               ║
║  Your CMS is now configured. Next steps:                      ║
║                                                               ║
║  1. Start the dev server:                                     ║
║     npm run cms:dev                                           ║
║                                                               ║
║  2. Open http://localhost:5173 in your browser                ║
║                                                               ║
║  3. Import/create an article                                  ║
║                                                               ║
║  4. Export to /dist and publish to Cloudflare                 ║
║                                                               ║
║  📚 For more info, see CMS_README.md                          ║
║                                                               ║
╚═══════════════════════════════════════════════════════════════╝
`);
}

// Run setup
setup().catch((error) => {
  console.error("\n❌ Setup failed:", error.message);
  console.log("\n💡 For help, see CMS_README.md or open an issue on GitHub");
  process.exit(1);
});
